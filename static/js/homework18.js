"use strict"

// Упражнение 1
let a = '100px';
let b = '323px';

let result = parseInt(a) + parseInt(b);
console.log(result);	// Выводим в консоль, должно получится 423

// Упражнение 2
console.log(Math.max(10, -45, 102, 36, 12, 0, -1));	 //выведет в консоль максимальное число среди указанных

// Упражнение 3
let d = 0.111; // Округлить до 1
console.log(Math.ceil(d));

let e = 45.333333; // Округлить до 45.3
console.log(Number(e.toFixed(1)));

let f = 3; // Возвести в степень 5 (должно быть 243)
console.log(Math.pow(3, 5));

let g = 400000000000000; // Записать в сокращенном виде
console.log(4e14);

let h = '1' != 1; // Поправить условие, чтобы результат был true(значения изменять нельзя, только оператор)
console.log('1' == 1);

// Упражнение 4
console.log(0.1 + 0.2 === 0.3); // Вернёт false, почему?
// Внутри JavaScript число представлено в виде 64 - битного формата IEEE - 754. 
// Для хранения числа используется 64 бита: 52 из них используется для хранения цифр, 
// 11 для хранения положения десятичной точки и один бит отведён на хранение знака.
// Причина в двоичном хранении данных - точное соотсетствие между двоичной и десятичной системами исчесления
// только между дробями в знаменателе которых будет степень двойки: 0.5, 0.25 и т.д.
// для 0.1 и 0.2 потеря точности происходит в 17 и 18 знаке после запятой
// и когда мы суммируем 2 числа, их «неточности» тоже суммируются.
// нагляно это можно увидеть в следующем примере с округлением
console.log(0.1.toFixed(20));
console.log(0.2.toFixed(20));
console.log((0.1 + 0.2).toFixed(20));
